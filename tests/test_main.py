# -*- coding: utf-8 -*-
"""
Created on Thu Mar 28 15:26:59 2019

@author: rogerluo
"""
import pytest


import numpy as np
import traceback
from lwmlearn import pipe_main, LW_model
from sklearn.datasets import make_classification

@pytest.fixture
def data():
    '''retrun fake data
    '''
    X, y = make_classification(100, n_features=25, n_informative=10)
    # non negative
    X = np.where(X<0, -X, X)
    return X, y

@pytest.fixture
def data_real():
    '''
    

    Returns
    -------
    None.

    '''
    X, y = 0, 0
    return X, y


# def _model_run(data, pipe):
#     '''single run for one ML_model instance
#     '''
#     X, y = data
#     E = ML_model(pipe, path=pipe)

#     E.run_analysis((X, y), (X, y), max_leaf_nodes=5)

#     E.delete_model()


# @pytest.mark.fast
# def test_ml_model(data, pipe='clean_oht_XGBClassifier'):
#     ''' test single estimator SVC
#     '''
#     # test
#     check = 0
#     try:
#         _model_run(data, pipe)
#     except Exception as e:
#         print(repr(e))
#         check -= 1
#     assert check == 0


def test_fit_transform(data):
    '''test  fit/transform/resample for all pipelines generated by pipe_main
    '''
    X, y = data
   
    all_d = pipe_main()
    operator_set = []
    for i in all_d['default'].values():
        operator_set.extend(i)
    
    for i in all_d['predefined'].values():
        operator_set.extend(i)
    operator_set = set(operator_set)
    
    not_test_operators = [
         'IsotonicRegression', 'FeatureHasher', 'DictVectorizer', 
         'ColumnTransformer', 'SparseRandomProjection', 'MultiLabelBinarizer',
         'SMOTENC', 'SparseCoder', 'MultiTaskLasso', 'LabelEncoder', 
         'MultiTaskElasticNetCV', 'HashingVectorizer', 'KernelCenterer',
         'GaussianRandomProjection', 'MultiTaskLassoCV', 'FeatureUnion', 
         'LabelBinarizer', 'MultiTaskElasticNet']
       
    operator_set = operator_set.difference(not_test_operators)
    # test
    check = 0
    n = []
    for i in operator_set:
        try:
            p = pipe_main(i)
            if hasattr(p, 'fit'):
                p.fit(X, y=y)
            if hasattr(p, 'transform'):
                p.transform(X)
            if hasattr(p, 'resample'):
                p.resample(X, y)
        except Exception:
            traceback.print_exc()
            check -= 1
            n.append(i)
    if check < 0:
        print('{} operators failed <test_fit_transform> \n'.format(n))
        print("failed operators are {}".format(n))
    
    assert check == 0       
        
def test_LW_model_method(data, tmp_path):
    '''test LW_model method
    '''
    
    # test
    check = 0
    try:
        m = LW_model(path=tmp_path)
    except:
        traceback.print_exc()
        check = -1
    assert check == 0
    
# def test_ml_model_all(data):
#     '''test ML_model for all estimators generated by pipe_main
#     '''
#     X, y = data
#     items = pipe_main()
#     pipe = [
#         '_'.join(['clean_ordi', a]) for i in items for a in items.get(i)
#         if i in ['estimator']
#     ]

#     # test
#     check = 0
#     n = []
#     for i in pipe:
#         try:
#             _model_run(data, i)
#         except Exception as e:
#             print(repr(e))
#             check -= 1
#             n.append(i)
#     if check < 0:
#         print('{} failed <test_ml_model_all> \n'.format(n))
#     assert check == 0
